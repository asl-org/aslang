newline ::= "\n"
space ::= " "
underscore ::= "_"
equal ::= "="
plus ::= "+"
minus ::= "-"
period ::= "."
double_quote ::= "\""
backslash ::= "\\"
colon ::= ":"
comma ::= ","
curly_open ::= "{"
curly_close ::= "}"
paren_open ::= "("
paren_close ::= ")"
hashtag ::= "#"

lowercase_alphabet ::= [a-z]
uppercase_alphabet ::= [A-Z]
digit ::= [0-9]
sign ::= plus | minus
visible_character ::= [32-126]

equal_separated ::= space* equal space*
colon_separated ::= space* colon space*
comma_separated ::= space* comma space*

fn_keyword ::= "fn"
returns_keyword ::= "returns"
args_keyword ::= "args"

identifier_head ::= underscore | lowercase_alphabet | uppercase_alphabet
identifier_tail ::= underscore | lowercase_alphabet | uppercase_alphabet | digit
identifier ::= identifier_head identifier_tail*

float ::= sign? digit+ period digit+
integer ::= sign? digit+
number ::= float | integer

initializer ::= identifier equal_separated identifier space* literal

leading_arg ::= identifier comma_separated
arglist ::= paren_open space* leading_arg* identifier space* paren_close
function_call ::= identifier equal_separated identifier period identifier space* arglist

fn_macro_call ::= fn_keyword space* identifier space* returns_keyword space* identifier colon

arg_def ::= identifier space* identifier
leading_arg_def ::= arg_def comma_separated
arg_def_list ::= paren_open space* leading_arg_def* arg_def space* paren_close
args_macro_call ::= args_keyword space* arg_def_list colon

macro_call ::= fn_macro_call | args_macro_call

statement ::= initializer | function_call | macro_call

comment ::= hashtag visible_character*

line_content ::= statement | comment
line ::= space* line_content space* | space*

leading_line ::= line newline
program ::= leading_line* line

