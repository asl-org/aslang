import results

import parser

import rules/reducer; export reducer
import rules/all

proc asl_grammar*(): Result[Grammar[ParseResult], string] =
  new_grammar[ParseResult](@[
    space_rule,
    newline_rule,
    underscore_rule,
    minus_rule,
    equal_rule,
    comma_rule,
    colon_rule,
    hashtag_rule,
    period_rule,
    paren_open_rule,
    paren_close_rule,
    brace_open_rule,
    brace_close_rule,
    visible_character_rule,
    eof_rule,
    digit_rule,
    lowercase_alphabet_rule,
    uppercase_alphabet_rule,
    alphabet_rule,
    identifier_head_rule,
    identifier_tail_rule,
    identifier_rule,
    integer_rule,
    keyword_arg_value_rule,
    keyword_arg_rule,
    leading_keyword_arg_rule,
    struct_rule,
    literal_rule,
    leading_module_ref_rule,
    module_ref_rule,
    init_rule,
    arg_rule,
    leading_arg_rule,
    arglist_rule,
    fncall_rule,
    expr_rule,
    assignment_rule,
    fn_keyword_rule,
    returns_keyword_rule,
    args_keyword_rule,
    app_keyword_rule,
    module_keyword_rule,
    struct_keyword_rule,
    union_keyword_rule,
    match_keyword_rule,
    case_keyword_rule,
    else_keyword_rule,
    arg_def_rule,
    leading_arg_def_rule,
    arg_def_list_rule,
    fn_def_rule,
    keyword_arg_def_rule,
    leading_keyword_arg_def_rule,
    struct_def_rule,
    union_def_rule,
    app_def_rule,
    module_def_rule,
    match_def_rule,
    case_pattern_rule,
    case_def_rule,
    else_def_rule,
    struct_macro_rule,
    union_macro_rule,
    macro_call_rule,
    statement_rule,
    comment_rule,
    line_rule,
    leading_line_rule,
    program_rule,
  ])
